#!/bin/bash
# ============================================
# üß† Author: Gustavo Silva Da Costa (Eto Demerzerl)
# üåÄ License: CC BY-NC-SA 4.0
# ============================================
# Split video file into separate audio and video streams
# Part of Light Sculpture toolkit
# === üîç Check and install dependencies ===
set -euo pipefail

check_dependencies() {
    # Check for ffmpeg
    if ! command -v ffmpeg &>/dev/null; then
        echo "üì¶ ffmpeg not found. Installing..."
        
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            if command -v brew &>/dev/null; then
                brew install ffmpeg
            else
                echo "‚úñ ERROR: Please install ffmpeg manually"
                exit 1
            fi
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            # Linux
            if command -v apt-get &>/dev/null; then
                sudo apt-get update && sudo apt-get install -y ffmpeg
            elif command -v yum &>/dev/null; then
                sudo yum install -y ffmpeg
            elif command -v dnf &>/dev/null; then
                sudo dnf install -y ffmpeg
            else
                echo "‚úñ ERROR: Please install ffmpeg manually"
                exit 1
            fi
        else
            echo "‚úñ ERROR: Unsupported OS. Please install ffmpeg manually"
            exit 1
        fi
        
        # Verify installation
        if ! command -v ffmpeg &>/dev/null; then
            echo "‚úñ ERROR: Failed to install ffmpeg"
            exit 1
        fi
        echo "‚úÖ ffmpeg installed successfully"
    fi
}

main() {
    # === üìÅ Request video file path ===
    echo "üìÅ Enter the video file path:"
    read -e VIDEO_PATH
    
    # === üîç Verify file existence ===
    echo "üîç Verifying file existence..."
    if [[ ! -f "$VIDEO_PATH" ]]; then
        echo "üö´ File not found. Please check the path."
        echo "‚ùå File does not exist: $VIDEO_PATH"
        exit 1
    fi
    
    # === üìÇ Create output directories ===
    AUDIO_DIR="$HOME/light-sculpture/output/audio-only"
    VIDEO_DIR="$HOME/light-sculpture/output/video-only"
    mkdir -p "$AUDIO_DIR"
    mkdir -p "$VIDEO_DIR"
    echo "üìÇ Output directories created or already exist."
    
    # === üè∑Ô∏è Generate output filenames ===
    BASENAME=$(basename "$VIDEO_PATH" | cut -d. -f1)
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    AUDIO_FILENAME="${BASENAME}_audio_${TIMESTAMP}.wav"
    VIDEO_FILENAME="${BASENAME}_video_${TIMESTAMP}.mp4"
    
    # === üé¨ Split audio and video ===
    echo "üîÑ Processing file with ffmpeg..."
    ffmpeg -i "$VIDEO_PATH" \
        -map 0:a -acodec pcm_s16le "$AUDIO_DIR/$AUDIO_FILENAME" \
        -map 0:v -vcodec copy "$VIDEO_DIR/$VIDEO_FILENAME" \
        -loglevel error -stats
    
    # === ‚úÖ Verify results ===
    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Separation completed successfully!"
        echo "üéß Audio: $AUDIO_DIR/$AUDIO_FILENAME"
        echo "üé¨ Video: $VIDEO_DIR/$VIDEO_FILENAME"
        
        # Show file sizes
        if [[ -f "$AUDIO_DIR/$AUDIO_FILENAME" ]]; then
            AUDIO_SIZE=$(du -h "$AUDIO_DIR/$AUDIO_FILENAME" | cut -f1)
            echo "   Size: $AUDIO_SIZE"
        fi
        if [[ -f "$VIDEO_DIR/$VIDEO_FILENAME" ]]; then
            VIDEO_SIZE=$(du -h "$VIDEO_DIR/$VIDEO_FILENAME" | cut -f1)
            echo "   Size: $VIDEO_SIZE"
        fi
    else
        echo "‚ùå Error processing file with ffmpeg."
        exit 1
    fi
}

cleanup() {
    # Clean any temporary files if needed
    :
}

# === üöÄ Execute script ===
trap cleanup EXIT
check_dependencies
main "$@"
